class Pair{
    int row;
    int col;
    Pair(int row,int col){
        this.row=row;
        this.col=col;
    }
}

class Solution {
    public int numIslands(char[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        boolean visited[][]=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    count++;
                    BFS(i,j,grid,visited);
                }
            }
        }
        return count;
    }
    public void BFS(int row,int col,char[][] grid,boolean[][] visited){
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(row,col));
        visited[row][col]=true;
        int m=grid.length;
        int n=grid[0].length;

        while(!q.isEmpty()){
            int prow=q.peek().row;
            int pcol=q.peek().col;
            q.remove();
            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){
                    if((Math.abs(i)+Math.abs(j))!=2){
                        int checkrow=prow+i;
                        int checkcol=pcol+j;
                    if(checkrow>=0 && checkcol>=0 && checkrow<m && checkcol< n && grid[checkrow][checkcol]=='1' && !visited[checkrow][checkcol]){
                        visited[checkrow][checkcol]=true;
                        q.add(new Pair(checkrow,checkcol));
                    }
                    }
                }
            }
        }
    }
}